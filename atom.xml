<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>GaryHome</title>
  
  <subtitle>技术探索与生活随笔</subtitle>
  <link href="https://garybyd.github.io/atom.xml" rel="self"/>
  
  <link href="https://garybyd.github.io/"/>
  <updated>2025-03-04T02:40:54.423Z</updated>
  <id>https://garybyd.github.io/</id>
  
  <author>
    <name>Gary Byd</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>redis基础结构</title>
    <link href="https://garybyd.github.io/posts/redis%E5%9F%BA%E7%A1%80%E7%BB%93%E6%9E%84/"/>
    <id>https://garybyd.github.io/posts/redis%E5%9F%BA%E7%A1%80%E7%BB%93%E6%9E%84/</id>
    <published>2025-03-04T00:39:12.000Z</published>
    <updated>2025-03-04T02:40:54.423Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2><span id="redis入门">Redis入门</span></h2><p><strong>（NoSQL, Not Only SQL） 非关系型数据库</strong></p><img src="/posts/redis%E5%9F%BA%E7%A1%80%E7%BB%93%E6%9E%84/image-20250304085911096.png" class title="image-20250304085911096"><p><strong>关系型数据库</strong>：以 表格 的形式存在，以 行和列 的形式存取数据，一系列的行和列被称为表，无数张表组成了 数据库。支持复杂的 SQL 查询，能够体现出数据之间、表之间的关联关系；也支持事务，便于提交或者回滚。</p><p><strong>非关系型数据库</strong>：以 key-value 的形式存在，可以想象成电话本的形式，人名（key）对应电话号码（value）。不需要写一些复杂的 SQL 语句，不需要经过 SQL 的重重解析，性能很高；可扩展性也比较强，数据之间没有耦合性，需要新加字段就直接增加一个 key-value 键值对即可。</p><p><strong>Redis 是 速度极快的、基于内存的，键值型 NoSQL 数据库。</strong></p><h3><span id="为什么这么快"><strong>为什么这么快？</strong></span></h3><ul><li><p><strong>完全基于内存操作</strong>。</p></li><li><p><strong>使用非阻塞的 IO 多路复用机制</strong>。</p></li><li><p><strong>数据结构简单，对数据操作也简单。</strong></p></li><li><p><strong>使用单线程，避免了上下文切换和竞争产生的消耗。</strong></p></li><li><p>支持多种数据类型，包括 String、Hash、List、Set、ZSet 等。</p></li></ul><h3><span id="io-多路复用机制">IO 多路复用机制</span></h3><p>Redis 使用的是 <strong>IO 多路复用机制</strong> 来处理 <strong>高并发请求</strong>，这使得它能在 <strong>单线程</strong> 模式下仍然保持高吞吐量。</p><hr><p>🔹 <strong>Redis 为什么要用 IO 多路复用？</strong></p><ul><li><strong>Redis 是单线程的</strong>，但仍然能高效处理大量连接，这依赖于 IO 多路复用。</li><li>传统的 <strong>阻塞 IO</strong> 方式，每次只能处理一个连接，性能受限。</li><li>多路复用可以 <strong>同时监听多个客户端请求</strong>，只处理活跃连接，减少 CPU 空转。</li></ul><hr><p>🔹 <strong>Redis 的 IO 多路复用机制</strong></p><p>Redis 采用 <strong>epoll（Linux）或 select（Windows）</strong> 作为 IO 多路复用技术，主要使用 <strong><code>aeEventLoop</code> 事件处理机制</strong>：</p><ol><li><strong>主线程通过 <code>epoll/select/kqueue</code> 监听多个客户端连接</strong></li><li><strong>当某个连接有数据可读（如命令请求），Redis 触发相应的回调函数</strong></li><li><strong>回调函数读取请求，处理命令，返回结果</strong></li><li><strong>继续监听新的请求，不会阻塞在某个请求上</strong></li></ol><p>Redis 使用 <strong>事件驱动模型</strong>，主要有：</p><ul><li><strong>可读事件（AE_READABLE）</strong>：当客户端有数据可读时触发。</li><li><strong>可写事件（AE_WRITABLE）</strong>：当客户端可以写数据时触发。</li><li><strong>文件事件（File Event）</strong>：通过 <code>epoll</code> 监听 <strong>多个 socket 连接</strong>。</li><li><strong>时间事件（Time Event）</strong>：用于定时任务（比如 key 过期检测）。</li></ul><hr><p>🔹 <strong>Redis 多路复用示意图</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[多个客户端]<br>   │<br>   ▼<br>[epoll/select 监听]<br>   │<br>   ├── 客户端 A 可读 -&gt; 触发回调 -&gt; 读取数据<br>   ├── 客户端 B 可写 -&gt; 触发回调 -&gt; 发送数据<br>   ├── 客户端 C 可读 -&gt; 触发回调 -&gt; 读取数据<br>   │<br>   ▼<br>[主线程执行 Redis 命令逻辑]<br></code></pre></td></tr></table></figure><h2><span id="redis的基础结构类型">Redis的基础结构类型</span></h2><h3><span id="key结构">Key结构</span></h3><p>让 Redis 的 key 形成层级结构，使用 <code>:</code> 隔开：<code>项目名:业务名:类型:id</code>。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json">set blog<span class="hljs-punctuation">:</span>user<span class="hljs-punctuation">:</span><span class="hljs-number">1</span> &#x27;<span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Jack&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">22</span><span class="hljs-punctuation">&#125;</span>&#x27;<br>set blog<span class="hljs-punctuation">:</span>user<span class="hljs-punctuation">:</span><span class="hljs-number">2</span> &#x27;<span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Mike&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">23</span><span class="hljs-punctuation">&#125;</span>&#x27;<br>set blog<span class="hljs-punctuation">:</span>article<span class="hljs-punctuation">:</span><span class="hljs-number">1</span> &#x27;<span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Spring&quot;</span><span class="hljs-punctuation">&#125;</span>&#x27;<br></code></pre></td></tr></table></figure><h3><span id="string类型">String类型</span></h3><table><thead><tr><th>Key</th><th>Value</th></tr></thead><tbody><tr><td>blog:user:1</td><td>‘{“id”:1, “name”:“Jack”, “age”:22}’</td></tr><tr><td>blog:user:2</td><td>‘{“id”:2, “name”:“Mike”, “age”:23}’</td></tr></tbody></table><p><strong>分配策略：</strong></p><p>Java 的 String 是不可变的，无法修改。Redis 的 String 是动态的，可以修改的。Redis 的 String 在内部结构实现上类似于 Java 的 ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配。如图所示，当前字符串实际分配的空间为 capacity，一般高于实际的字符串长度 len。当字符串长度小于 1M 时，扩容是对现有空间的成倍增长；如果长度超过 1M 时，扩容一次只会多增加 1M 的空间。String 的最大长度为 512M。</p><img src="/posts/redis%E5%9F%BA%E7%A1%80%E7%BB%93%E6%9E%84/image-20250304091313106.png" class title="image-20250304091313106"><h3><span id="hash结构">Hash结构</span></h3><img src="/posts/redis%E5%9F%BA%E7%A1%80%E7%BB%93%E6%9E%84/image-20250304101409849.png" class title="image-20250304101409849"><h3><span id="list结构">list结构</span></h3><p><strong>List 类似 Java 中的 LinkedList，可以看作一个双向链表（有序可重复）</strong>。使用 List 可以对链表的两端进行 push 和 pop 操作、读取单个或多个元素、根据值查找或删除元素、支持正向检索和反向检索。</p><p><strong>栈</strong>：LPUSH + LPOP 或 RPUSH + RPOP。</p><p><strong>队列</strong>：LPUSH + RPOP 或 RPUSH + LPOP。</p><h3><span id="set结构">Set结构</span></h3><p><code>SADD key member [member ...]</code> ：向 Set 中添加一个或多个元素。</p><p><code>SMEMBERS key</code> ：获取指定 Set 中的所有元素。</p><p><code>SISMEMBER key member</code> ：判断 Set 中是否存在指定元素。</p><p><code>SCARD key </code>：返回 Set 中的元素个数。</p><p><code>SREM key member [member ...] </code> ：移除 Set 中的指定元素。</p><p><code>SINTER key [key ...]</code> ：求 n 个 key 间的交集。</p><p><code>SDIFF key [key ...]</code> ：求 n 个 key 间的差集。</p><p><code>SUNION key [key ...]</code> ：求 n 个 key 间的并集。</p><p><strong>Redis 的 Set 类似 HashSet，可以看作一个 value 为 null 的 HashMap；其特征也与 HashSet 类似：无序不可重复，支持 交集、并集、差集等功能。</strong></p><h3><span id="zset">ZSet</span></h3><p><strong>Redis 的 ZSet 是一个可排序的 Set 集合，类似 ZSet。ZSet 的每一个元素都带有一个 score 属性，可以基于 score 属性对元素排序。</strong></p><p><code>ZADD key [score member ...]</code> ：以 score 为权重向 ZSet 中添加一个或多个元素，如果存在则更新 score。</p><p><code>ZREM key member [member ...]</code> ：删除 ZSet 中的指定元素。</p><p><code>ZCARD key</code> ：返回 ZSet 中的元素个数。</p><p><code>ZSCORE key member </code>：获取 ZSet 中指定元素的 score 值。</p><p><code>ZADD key [score member ...]</code> ：以 score 为权重向 ZSet 中添加一个或多个元素，如果存在则更新 score。</p><p><code>ZREM key member [member ...] </code>：删除 ZSet 中的指定元素。</p><p><code>ZCARD key</code> ：返回 ZSet 中的元素个数。</p><p><code>ZSCORE key member</code> ：获取 ZSet 中指定元素的 score 值。</p><p><code>ZRANGEBYSCORE key min max</code> ：按照 score 排序后，获取 <strong>指定 score 范围</strong> 内的元素。</p><p><code>ZINTER numberKeys key [key ...] ｜ ZDIFF numberKeys key [key ...] ｜ ZUNION numberKeys key [key ...]</code> ：求 n 个 Zset 的交集、差集、并集。</p><h3><span id="redis-基础结构及其操作指令总结">Redis 基础结构及其操作指令总结</span></h3><table><thead><tr><th><strong>基础结构</strong></th><th><strong>描述</strong></th><th><strong>常用指令</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td><strong>String（字符串）</strong></td><td>最基本的数据结构，可以存储字符串、整数或浮点数</td><td><code>SET</code>、<code>GET</code>、<code>INCR</code>、<code>DECR</code>、<code>APPEND</code>、<code>MSET</code>、<code>MGET</code></td><td><code>SET key value</code>，<code>GET key</code></td></tr><tr><td><strong>List（列表）</strong></td><td>有序集合，允许重复元素，底层为双向链表</td><td><code>LPUSH</code>、<code>RPUSH</code>、<code>LPOP</code>、<code>RPOP</code>、<code>LRANGE</code></td><td><code>LPUSH mylist A B C</code>，<code>LRANGE mylist 0 -1</code></td></tr><tr><td><strong>Set（集合）</strong></td><td>无序集合，不允许重复元素</td><td><code>SADD</code>、<code>SREM</code>、<code>SMEMBERS</code>、<code>SISMEMBER</code></td><td><code>SADD myset A B C</code>，<code>SMEMBERS myset</code></td></tr><tr><td><strong>Hash（哈希）</strong></td><td>类似于对象，存储键值对</td><td><code>HSET</code>、<code>HGET</code>、<code>HGETALL</code>、<code>HDEL</code></td><td><code>HSET user name &quot;Alice&quot;</code>，<code>HGET user name</code></td></tr><tr><td><strong>ZSet（有序集合）</strong></td><td>具有权重（score）的集合，元素按分数排序</td><td><code>ZADD</code>、<code>ZRANGE</code>、<code>ZREM</code>、<code>ZSCORE</code></td><td><code>ZADD myzset 1 A 2 B</code>，<code>ZRANGE myzset 0 -1</code></td></tr><tr><td><strong>Bitmap（位图）</strong></td><td>位级别的存储，用于高效存储和操作二进制数据</td><td><code>SETBIT</code>、<code>GETBIT</code>、<code>BITCOUNT</code></td><td><code>SETBIT mybitmap 10 1</code>，<code>GETBIT mybitmap 10</code></td></tr><tr><td><strong>HyperLogLog</strong></td><td>近似去重计数结构，适用于大数据计数</td><td><code>PFADD</code>、<code>PFCOUNT</code></td><td><code>PFADD myhll A B C</code>，<code>PFCOUNT myhll</code></td></tr><tr><td><strong>Geo（地理位置）</strong></td><td>存储经纬度并计算地理距离</td><td><code>GEOADD</code>、<code>GEODIST</code>、<code>GEORADIUS</code></td><td><code>GEOADD mygeo 120.0 30.0 &quot;place1&quot;</code>，<code>GEODIST mygeo place1 place2</code></td></tr><tr><td><strong>Stream（流）</strong></td><td>可持久化的消息队列结构</td><td><code>XADD</code>、<code>XLEN</code>、<code>XREAD</code></td><td><code>XADD mystream * name &quot;Alice&quot;</code>，<code>XREAD COUNT 1 STREAMS mystream 0</code></td></tr></tbody></table><p>这些结构和指令在不同的应用场景中有不同的优势，比如 <strong>String</strong> 适用于缓存数据，<strong>List</strong> 适用于消息队列，<strong>Set</strong> 适用于去重，<strong>ZSet</strong> 适用于排行榜，<strong>Hash</strong> 适用于存储对象，<strong>Bitmap</strong> 适用于用户签到或活跃记录，<strong>HyperLogLog</strong> 适用于大规模数据去重统计，<strong>Geo</strong> 适用于地理位置存储，<strong>Stream</strong> 适用于事件流和消息队列。</p><h2><span id="java客户端连接redis">java客户端连接redis</span></h2><h3><span id="使用jedis">使用Jedis</span></h3><p>1.导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>redis.clients<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jedis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.8.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.建立连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JedisTest</span> &#123;<br>    <span class="hljs-keyword">private</span> Jedis jedis;<br><br>    <span class="hljs-meta">@BeforeEach</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUp</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//1.建立连接</span><br>        jedis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jedis</span>(<span class="hljs-string">&quot;192.168.200.130&quot;</span>,<span class="hljs-number">6379</span>);<br>        <span class="hljs-comment">//2.设置密码</span><br>        jedis.auth(<span class="hljs-string">&quot;1234&quot;</span>);<br>        <span class="hljs-comment">//3.选择库</span><br>        jedis.select(<span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testString</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> jedis.set(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;小明&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;result= &quot;</span> + result);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> jedis.get(<span class="hljs-string">&quot;name&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;name= &quot;</span>+name);<br>    &#125;<br><br>    <span class="hljs-meta">@AfterEach</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">tearDown</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span>(jedis!=<span class="hljs-literal">null</span>)&#123;<br>            jedis.close();<br>        &#125;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>3.jedis连接池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JedisConnectFactory</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> JedisPool jedisPool;<br><br>    <span class="hljs-keyword">static</span>&#123;<br>        <span class="hljs-comment">//配置连接池</span><br>        <span class="hljs-type">JedisPoolConfig</span> <span class="hljs-variable">poolConfig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisPoolConfig</span>();<br>        poolConfig.setMaxTotal(<span class="hljs-number">8</span>);<br>        poolConfig.setMaxIdle(<span class="hljs-number">8</span>);<br>        poolConfig.setMinIdle(<span class="hljs-number">0</span>);<br>        poolConfig.setMaxWait(Duration.ofMillis(<span class="hljs-number">1000</span>));<br>        jedisPool = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisPool</span>(poolConfig,<span class="hljs-string">&quot;192.168.200.130&quot;</span>,<span class="hljs-number">6379</span>,<span class="hljs-number">1000</span>,<span class="hljs-string">&quot;1234&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Jedis <span class="hljs-title function_">getJedis</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> jedisPool.getResource();<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>1） JedisConnectionFacotry：工厂设计模式是实际开发中非常常用的一种设计模式，我们可以使用工厂，去降低代的耦合，比如Spring中的Bean的创建，就用到了工厂设计模式</p><p>2）静态代码块：随着类的加载而加载，确保只能执行一次，我们在加载当前工厂类的时候，就可以执行static的操作完成对 连接池的初始化</p><p>3）最后提供返回连接池中连接的方法.</p><h3><span id="使用springdataredis连接">使用springDataRedis连接</span></h3><img src="/posts/redis%E5%9F%BA%E7%A1%80%E7%BB%93%E6%9E%84/image-20250304102916188.png" class title="image-20250304102916188"><p>1.导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Redis依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--连接池依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-pool2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.配置连接信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.130</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">1234</span><br>    <span class="hljs-attr">database:</span> <span class="hljs-number">0</span><br>    <span class="hljs-attr">lettuce:</span><br>      <span class="hljs-attr">pool:</span><br>        <span class="hljs-attr">max-active:</span> <span class="hljs-number">8</span> <span class="hljs-comment">#最大连接数</span><br>        <span class="hljs-attr">max-idle:</span> <span class="hljs-number">8</span> <span class="hljs-comment">#最大空闲连接</span><br>        <span class="hljs-attr">min-idle:</span> <span class="hljs-number">0</span> <span class="hljs-comment">#最小空闲连接</span><br>        <span class="hljs-attr">max-wait:</span> <span class="hljs-number">100</span> <span class="hljs-comment">#连接等待时间</span><br></code></pre></td></tr></table></figure><p>3.直接注入RedisTemplate出现的问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 自动注入的 `RedisTemplate` 需要加上泛型</span><br><span class="hljs-meta">@Resource</span><br><span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>  redisTemplate.opsForValue().set(<span class="hljs-string">&quot;k1&quot;</span>, <span class="hljs-string">&quot;v1&quot;</span>);<br>  Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>  map.put(<span class="hljs-string">&quot;k2&quot;</span>, <span class="hljs-string">&quot;v2&quot;</span>);<br>  map.put(<span class="hljs-string">&quot;k3&quot;</span>, <span class="hljs-string">&quot;v3&quot;</span>);<br>map.put(<span class="hljs-string">&quot;k4&quot;</span>, <span class="hljs-string">&quot;v4&quot;</span>);<br>  map.put(<span class="hljs-string">&quot;k5&quot;</span>, <span class="hljs-string">&quot;v5&quot;</span>);<br>  redisTemplate.opsForValue().multiSet(map);<br>redisTemplate.opsForValue().multiGet(Arrays.asList(<span class="hljs-string">&quot;k1&quot;</span>, <span class="hljs-string">&quot;k2&quot;</span>, <span class="hljs-string">&quot;k3&quot;</span>, <span class="hljs-string">&quot;k4&quot;</span>)).forEach(System.out::println);  <span class="hljs-comment">// v1 v2 v3 v4 v5</span><br>&#125;<br><br><span class="hljs-comment">//结果</span><br># 在 Redis 中查看通过 RedisTemplate 插入的数据<br>&gt; keys *<br><span class="hljs-number">1</span>) <span class="hljs-string">&quot;\xac\xed\x00\x05t\x00\x02k1&quot;</span><br><span class="hljs-number">2</span>) <span class="hljs-string">&quot;\xac\xed\x00\x05t\x00\x02k2&quot;</span><br><span class="hljs-number">3</span>) <span class="hljs-string">&quot;\xac\xed\x00\x05t\x00\x02k3&quot;</span><br><span class="hljs-number">4</span>) <span class="hljs-string">&quot;\xac\xed\x00\x05t\x00\x02k4&quot;</span><br><span class="hljs-number">5</span>) <span class="hljs-string">&quot;\xac\xed\x00\x05t\x00\x02k5&quot;</span><br><br>&gt; get <span class="hljs-string">&quot;\xac\xed\x00\x05t\x00\x02k1&quot;</span><br><span class="hljs-string">&quot;\xac\xed\x00\x05t\x00\x02v1&quot;</span><br></code></pre></td></tr></table></figure><p><strong>RedisTemplate 存在的问题</strong></p><p>通过以上操作可以发现：RedisTemplate 可以将任意类型的数据写入到 Redis 中，在写入前会将其序列化为字节形式存储，底层默认采用 <code>ObjectOutputStream</code> 序列化。</p><p>4.因此我们要重写他的序列化工具</p><p>导入 <code>jackson-databind</code> 依赖，并编写配置类 <strong>RedisTemplateConfig</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisTemplateConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="hljs-title function_">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory redisConnectionFactory)</span> &#123;<br>        <span class="hljs-comment">// 创建 RedisTemplate 对象</span><br>        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisTemplate</span>&lt;&gt;();<br>        <span class="hljs-comment">// 设置连接工厂</span><br>        redisTemplate.setConnectionFactory(redisConnectionFactory);<br>        <span class="hljs-comment">// 设置序列化工具</span><br>        <span class="hljs-type">GenericJackson2JsonRedisSerializer</span> <span class="hljs-variable">jsonRedisSerializer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericJackson2JsonRedisSerializer</span>();<br><br>        <span class="hljs-comment">// Key 和 HashKey 采用 String 序列化（StringRedisSerializer）</span><br>        redisTemplate.setKeySerializer(RedisSerializer.string());<br>        redisTemplate.setHashKeySerializer(RedisSerializer.string());<br>      <br>        <span class="hljs-comment">// Value 和 HashValue 采用 JSON 序列化（GenericJackson2JsonRedisSerializer）</span><br>        redisTemplate.setValueSerializer(jsonRedisSerializer);<br>        redisTemplate.setHashValueSerializer(jsonRedisSerializer);<br>        <br>        <span class="hljs-keyword">return</span> redisTemplate;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 自动注入的 `RedisTemplate` 需要加上泛型</span><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>    redisTemplate.opsForValue().set(<span class="hljs-string">&quot;k1&quot;</span>, <span class="hljs-string">&quot;v1&quot;</span>);<br>  redisTemplate.opsForValue().set(<span class="hljs-string">&quot;user:1&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;Jack&quot;</span>, <span class="hljs-number">21</span>));<br>&#125;<br><br></code></pre></td></tr></table></figure><p>通过以上的方法能够解决数据序列化时 <strong>可读性差、内存占用大</strong> 的问题。</p><p>但是 JSON 的序列化方式仍然存在一些问题：为了反序列化时知道对象的类型，<strong>JSON 序列化器会将类的 class 类型写入 JSON 结果，存入 Redis 中，会带来额外的内存开销。</strong></p><p>5.使用StringRedisTemplate</p><p>为了节省内存空间，Spring 提供了一个 <strong>StringRedisTemplate</strong>，它的 key 和 value 的序列化方式默认就是 String，统一使用 String 序列化器。</p><p>当需要存储 Java 对象时，手动完成对象的序列化和反序列化。</p><ol><li>使用 StringRedisTemplate。</li><li>写入数据到 Redis 中，手动将对象序列化为 JSON。</li><li>从 Redis 中读取数据，手动将读取到的 JSON 反序列化为对象。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ttt</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException &#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;Michael&quot;</span>, <span class="hljs-number">27</span>);<br>    <span class="hljs-comment">// 手动序列化</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> objectMapper.writeValueAsString(user);<br>    <span class="hljs-comment">// 写入数据</span><br>    stringRedisTemplate.opsForValue().set(<span class="hljs-string">&quot;user:1&quot;</span>, json);<br>    <span class="hljs-comment">// 读取数据</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(<span class="hljs-string">&quot;user:1&quot;</span>);<br>    <span class="hljs-comment">// 反序列化</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">deserializedUser</span> <span class="hljs-operator">=</span> objectMapper.readValue(data, User.class);<br>    System.out.println(deserializedUser);<br>&#125;<br><span class="hljs-comment">//结果</span><br>&#123;<br>  <span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;Michael&quot;</span>,<br>  <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">27</span><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;h2&gt;&lt;span id=&quot;redis入门&quot;&gt;Redis入门&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;（NoSQL, Not Only SQL） 非关系型数据库&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&quot;/posts/re</summary>
      
    
    
    
    <category term="redis笔记" scheme="https://garybyd.github.io/categories/redis%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="redis" scheme="https://garybyd.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Hexo常用指令大全</title>
    <link href="https://garybyd.github.io/posts/Hexo%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
    <id>https://garybyd.github.io/posts/Hexo%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%E5%A4%A7%E5%85%A8/</id>
    <published>2025-03-02T11:33:33.000Z</published>
    <updated>2025-03-02T14:21:31.790Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p><strong>Hexo 常用命令速查表</strong></p><table><thead><tr><th>命令</th><th>功能</th><th>常用参数/示例</th></tr></thead><tbody><tr><td><strong>初始化</strong></td><td></td><td></td></tr><tr><td><code>npm install -g hexo-cli</code></td><td>全局安装Hexo命令行工具</td><td></td></tr><tr><td><code>hexo init &lt;folder&gt;</code></td><td>初始化博客项目</td><td><code>hexo init myblog</code></td></tr><tr><td><code>npm install</code></td><td>安装依赖包（在项目目录执行）</td><td></td></tr><tr><td><strong>内容管理</strong></td><td></td><td></td></tr><tr><td><code>hexo new &quot;标题&quot;</code></td><td>新建文章</td><td><code>hexo new &quot;Hello World&quot;</code></td></tr><tr><td><code>hexo new page &quot;名称&quot;</code></td><td>新建页面</td><td><code>hexo new page &quot;about&quot;</code></td></tr><tr><td><code>hexo publish &lt;filename&gt;</code></td><td>发布草稿</td><td><code>hexo publish draft/untitled.md</code></td></tr><tr><td><strong>生成与预览</strong></td><td></td><td></td></tr><tr><td><code>hexo generate</code></td><td>生成静态文件（简写<code>hexo g</code>）</td><td><code>hexo g --watch</code>（监听文件变化）</td></tr><tr><td><code>hexo server</code></td><td>启动本地服务器（简写<code>hexo s</code>）</td><td><code>hexo s -p 5000</code>（指定端口）</td></tr><tr><td><code>hexo clean</code></td><td>清除缓存和生成文件</td><td>常与生成命令组合使用</td></tr><tr><td><strong>部署</strong></td><td></td><td></td></tr><tr><td><code>npm install hexo-deployer-git --save</code></td><td>安装Git部署插件</td><td></td></tr><tr><td><code>hexo deploy</code></td><td>部署到服务器（简写<code>hexo d</code>）</td><td><code>hexo d --generate</code>（先生成后部署）</td></tr><tr><td><strong>组合命令</strong></td><td></td><td></td></tr><tr><td><code>hexo g -d</code></td><td>生成后立即部署</td><td>常用部署组合</td></tr><tr><td><code>hexo s -g</code></td><td>生成后启动服务器</td><td>开发调试常用</td></tr><tr><td><strong>高级操作</strong></td><td></td><td></td></tr><tr><td><code>hexo list &lt;type&gt;</code></td><td>列出所有文章/页面等</td><td><code>hexo list post</code></td></tr><tr><td><code>hexo version</code></td><td>查看Hexo版本</td><td></td></tr><tr><td><code>hexo --config custom.yml</code></td><td>使用自定义配置文件</td><td>多环境配置时使用</td></tr></tbody></table><p><strong>典型工作流示例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 创建新文章</span><br>hexo new <span class="hljs-string">&quot;深入理解Hexo架构&quot;</span><br><br><span class="hljs-comment"># 2. 本地写作并预览</span><br>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s<br><br><span class="hljs-comment"># 3. 部署到GitHub</span><br>hexo clean &amp;&amp; hexo g -d<br></code></pre></td></tr></table></figure><hr><p><strong>配置注意要点</strong></p><ol><li>部署配置（<code>_config.yml</code>）</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">https://github.com/用户名/仓库名.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">gh-pages</span><br></code></pre></td></tr></table></figure><ol start="2"><li>主题配置示例</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">theme:</span> <span class="hljs-string">icarus</span>  <span class="hljs-comment"># 需先安装主题到themes目录</span><br></code></pre></td></tr></table></figure><hr><p><strong>常用插件推荐</strong></p><table><thead><tr><th>插件</th><th>功能</th><th>安装命令</th></tr></thead><tbody><tr><td><code>hexo-abbrlink</code></td><td>生成永久链接</td><td><code>npm install hexo-abbrlink --save</code></td></tr><tr><td><code>hexo-all-minifier</code></td><td>压缩静态资源</td><td><code>npm install hexo-all-minifier --save</code></td></tr><tr><td><code>hexo-generator-search</code></td><td>添加本地搜索</td><td><code>npm install hexo-generator-search --save</code></td></tr></tbody></table><p>掌握这些命令可提升博客管理效率，建议结合<code>--debug</code>参数排查问题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g --debug  <span class="hljs-comment"># 显示详细生成日志</span><br></code></pre></td></tr></table></figure><p>icarus教程:<a href="https://ppoffice.github.io/hexo-theme-icarus/categories/Widgets/">https://ppoffice.github.io/hexo-theme-icarus/categories/Widgets/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;p&gt;&lt;strong&gt;Hexo 常用命令速查表&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;th&gt;常用参数/示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;t</summary>
      
    
    
    
    <category term="Hexo教程" scheme="https://garybyd.github.io/categories/Hexo%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Hexo" scheme="https://garybyd.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
